name: Buildorder

on:
  push:
    branches:
    - '*'
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
    - 'scripts/buildorder.py'
  pull_request:
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
    - 'scripts/buildorder.py'
  workflow_dispatch:

permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: [aarch64, arm, i686, x86_64]
      fail-fast: false
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Lint packages
      run: |
        declare -a package_recipes
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          if [ -f ./built_${repo}_packages.txt ]; then
            package_recipes="$package_recipes $(cat ./built_${repo}_packages.txt | repo_path=${repo_path} awk '{print ENVIRON["repo_path"]"/"$1"/build.sh"}')"
          fi
        done

        if [ ! -z "$package_recipes" ]; then
          ./scripts/lint-packages.sh $package_recipes
        fi

    - name: Build packages
      run: |
        declare -a packages
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)

          if [ -f ./built_${repo}_packages.txt ]; then
            packages="$packages $(cat ./built_${repo}_packages.txt)"
          fi
        done

        if [ ! -z "$packages" ]; then
          if grep -q ' clvk\|dart\|libllvm\|rust\|rustc-nightly\|swift\|tinygo\|wasmer\|zig\|firefox ' <<< "$packages"; then
            ./scripts/setup-ubuntu.sh
            sudo apt install ninja-build
            NDK=$ANDROID_NDK_ROOT ANDROID_HOME=$ANDROID_SDK_ROOT ./build-package.sh -I -a ${{ matrix.target_arch }} $packages
          else
            ./scripts/run-docker.sh ./build-package.sh -I -a ${{ matrix.target_arch }} $packages
          fi
        fi

    - name: Generate build artifacts
      if: always()
      run: |
        test -d termux-packages/output && mv termux-packages/output/* ./output/

        for repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do
          # Put package lists into directory with *.deb files so they will be transferred to
          # upload job.
          test -f ./built_${repo}_packages.txt && mv ./built_${repo}_packages.txt ./debs/
          test -f ./built_${repo}_subpackages.txt && cat ./built_${repo}_subpackages.txt >> ./debs/built_${repo}_packages.txt \
            && rm ./built_${repo}_subpackages.txt
          test -f ./deleted_${repo}_packages.txt && mv ./deleted_${repo}_packages.txt ./debs/

          # Move only debs from built_packages into debs/ folder before
          # creating an archive.
          while read -r pkg; do
            # Match both $pkg.deb and $pkg-static.deb.
            find output \( -name "$pkg_*.deb" -o -name "$pkg-static_*.deb" \) -type f -print0 | xargs -0r mv -t debs/
          done < <(cat ./debs/built_${repo}_packages.txt)
        done

        # Files containing certain symbols (e.g. ":") will cause failure in actions/upload-artifact.
        # Archiving *.deb files in a tarball to avoid issues with uploading.
        tar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs
    - name: Checksums for built *.deb files
      if: always()
      run: |
        find debs -type f -name "*.deb" -exec sha256sum "{}" \; | sort -k2
    - name: Store *.deb files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: debs-${{ matrix.target_arch }}-${{ github.sha }}
        path: ./artifacts

  upload:
    concurrency: ${{ github.workflow }}
    permissions:
      contents: read
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Get *.deb files
      uses: actions/download-artifact@v3
      with:
        path: ./
    - name: Upload to packages.termux.dev
      env:
        REPOSITORY_URL: https://packages.termux.dev/aptly-api
      run: |
        GITHUB_SHA=${{ github.sha }}
        APTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}
        GPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}

        source scripts/aptly_api.sh

        for archive in debs-*/debs-{aarch64,arm,i686,x86_64}-${{ github.sha }}.tar; do
          tar xf "$archive"
        done

        for repo in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          export REPOSITORY_NAME=$(jq --raw-output '.["'$repo'"].name' repo.json)
          export REPOSITORY_DISTRIBUTION=$(jq --raw-output '.["'$repo'"].distribution' repo.json)

          # Upload file to temporary directory.
          uploaded_files=false
          shopt -s nullglob

          if [ -f debs/built_${REPOSITORY_NAME}_packages.txt ]; then
            for filename in $(cat debs/built_${REPOSITORY_NAME}_packages.txt | sed -E 's/(..*)/debs\/\1_\*.deb debs\/\1-static_\*.deb/g'); do
              if ! aptly_upload_file "$filename"; then
                exit 1
              fi

              uploaded_files=true
            done
            shopt -u nullglob

            # Publishing repository changes.
            if [ "$uploaded_files" = "true" ]; then
              if ! aptly_add_to_repo; then
                exit 1
              fi

              # Usually temporary directory is deleted automatically, but in certain cases it is left.
              aptly_delete_dir

              # Final part to make changes appear in web root.
              if ! aptly_publish_repo; then
                exit 1
              fi
            fi
          fi
        done
